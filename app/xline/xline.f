C-------------------------------------------------------------------------------
C
      PROGRAM XLINE
C
C     Purpose:
C
C     XLINE is a program originally intended to remove the %%EOF lines
C     from PostScript files generated by DISSPLA applications.  (For some
C     reason, they prevent plot pages after the first from printing on a
C     LaserWriter.)  In case of future similar needs, the target string
C     has been made variable (via a second command line argument).
C
C     The target string must have the correct case and START the line.  If
C     it is not strictly uppercase, or if it contains embedded blanks, etc.,
C     it must be enclosed in double quotes (") on the command line.
C     (Single quotes (') didn't work for VMS - DCL expands symbols so denoted,
C     but now, under Unix and with getargs in place of getprm, they appear OK.)
C
C     A next higher version of the file is produced, with the offending
C     lines removed.  The original file is left intact.
C
C     [Later: version numbers are defunct VMSisms.  The output file name is
C     now the input file name with '.xline' appended.]
C
C     If the target string is %%EOF, the last-occurring such line is NOT
C     removed, as it may well be needed for clean termination of the
C     subsequent printing.
C
C     Sample usage:
C
C        xline qplot.ps         ! Removes %%EOF lines; ensures a final %%EOF
C        xline file.txt *DECK   ! Removes lines starting with *DECK (uppercase)
C        xline file.txt "*deck" ! Removes lines starting with *deck (mixed case)
C        xline file.txt "? ?"   ! Removes lines starting with ? ? (embedded bl.)
C        xline file.txt '? ?'   ! Should do the same
C        xline file.txt !       ! Removes lines starting with !
C
C     Procedures:
C
C     GETARGS       Gets the command line argument(s)
C     STRIPPER      Handy for dealing with non-uppercase or embedded blanks
C
C     Environment:  VAX/VMS; FORTRAN 77 (originally)
C                   Unix/Linux; Fortran 90 (now)
C
C     History:
C
C     02/28/91  D.Saunders  Initial adaptation from XDECK ('82 - '86) -
C                           no longer a preferred style, but...
C     02/27/05   "     "    Replaced '0..' with / in formats.
C                           Abandoned version numbers: added '.xline' to
C                           the input file name.
C                           Changed the use of " to use of % because the
C                           command line string comes out wrong if either
C                           " or ' is used as the delimiter with getprm.
C                           Also, the command line arguments are repacked
C                           with a single blank between them before xline
C                           sees them, so leading or embedded blanks in
C                           the target string are not an option.
C                           E.g.:  xline test.txt Surface     and
C                                  xline test.txt %Surface%
C                           will both remove a line starting with Surface,
C                           but    xline test.txt %surface% will not.
C     08/23/13   "     "    Replaced early GETPRM utility with preferred
C                           GETARGS utility.  The style inherited from XDECK
C                           is tiresome.  Now embedded blanks appear OK.
C                           Forget about using % as a delimiter too: single or
C                           double quotes should serve likely needs.
C
C     Author:  David Saunders, NASA Ames/Sterling Software, Palo Alto, CA.
C
C-------------------------------------------------------------------------------

      IMPLICIT    NONE

C     Constants:

      INTEGER, PARAMETER ::
     >   ioerr_open  = 1,
     >   ioerr_close = 2,
     >   maxargs     = 2,     ! Max. # arguments allowed for
     >   maxchars    = 64,    ! Max. length of any argument + 1
     >   maxline     = 135,   ! Max. length of any input file line
     >   read_file   = 1,
     >   write_file  = 2,
     >   sysoutput   = 6

      CHARACTER (5), PARAMETER ::
     >   progname    = 'xline'

C     Variables:

      INTEGER         :: ifile, ioerr, ipos, lenprm, lentarg, n, nargs,
     >                   status

      CHARACTER (maxchars) :: args (0 : maxargs)  ! Progname --> args (0)
      CHARACTER (2)        :: delims
      CHARACTER (14)       :: errmsg (2)
      CHARACTER (4)        :: file (2)
      CHARACTER (maxline)  :: line
      CHARACTER (maxchars) :: target

C     Storage:

      DATA
     >   errmsg(1) /' open error on'/,
     >   errmsg(2) /'close error on'/,
     >   file(1)   /' old'/          ,
     >   file(2)   /' new'/

C     Execution:

CC    Get the command line argument string.  (VMS eliminates redundant blanks.)

CC    CALL getprm (line, lenprm)

CC    write (*, '(/, a, i4, a, a)')
CC   >   ' lenprm: ', lenprm, '   line: ', trim (line)

CC    IF (lenprm .eq. 0) GO TO 80

C     Determine the command line argument(s) (one, or two at most):

      CALL getargs (maxargs, maxchars, progname, nargs, args)

      IF (nargs .EQ. 0) GO TO 80

      n = len_trim (args (1)) - 1  ! File name length; omit the null terminator

CC    Get input file name:

CC    n = INDEX (line (1 : lenprm), blank) - 1

      IF (nargs .EQ. 1) THEN   ! Default case - no target string specified
         target  = '%%EOF'
         lentarg = 5
      ELSE                     ! Pick off the 2nd argument (target string)
         target  = args (2)
         lentarg = len_trim (target) - 1  ! Omit the null terminator

C        A target string was supplied.  It may be quoted to embed blanks.
C        Strip out any bracketing quotes:

         delims (1 : 1) = "'"
         delims (2 : 2) = '"'
         CALL stripper (target, lentarg, delims)

      END IF

CC    write (*, '(a,a)') ' Target string: ', target (1 : lentarg)

C     Input file name may or may not have version #. Either is OK:

      ifile = read_file

      ioerr = ioerr_open
      OPEN (UNIT = read_file, FILE = args (1) (1 : n), STATUS = 'old',
     >      ERR = 90)

C     Output file is to be the next version number.  [Not any more.]
C     Ensure that any version number in the command is ignored:

      ipos = INDEX (args (1) (1 : n), ';')
      IF (ipos .NE. 0) n = ipos

C     Open output file:

      ifile = write_file
      OPEN (UNIT = write_file, FILE = args (1) (1 : n) // '.xline',
     >      STATUS = 'unknown', ERR = 90)

C     Process files line-by-line:

      DO  ! Until EOF

         READ (UNIT = read_file, FMT = '(A)', IOSTAT = status) line

         IF (status .EQ. 0) THEN

            n = LEN_TRIM (line)

            IF (n .EQ. 0) THEN   ! Transfer an empty line.

               WRITE (UNIT = write_file, FMT = '(A)')

            ELSE IF (line (1 : lentarg) .NE. target (1 : lentarg)) THEN

               WRITE (UNIT = write_file, FMT = '(A)') line (1 : n)

            END IF

         ELSE IF (status .LT. 0) THEN  ! EOF

            IF (target (1 : lentarg) .EQ. '%%EOF') THEN ! Don't remove last EOF

               WRITE (UNIT = write_file, FMT = '(A)') line (1 : n)

            END IF

            EXIT

         END IF

      END DO


      ioerr = ioerr_close

      ifile = read_file
      CLOSE (UNIT = read_file , ERR = 90)

      ifile = write_file
      CLOSE (UNIT = write_file, ERR = 90)

      GO TO 99


C     Error handling:

   80 WRITE (UNIT = sysoutput, FMT = '(/, A)')
     >   ' *** Usage:  xline filename [target string; default = %%EOF]'
      GO TO 99

   90 WRITE (UNIT = sysoutput, FMT = '(/, 2A, ''file'')')
     >   errmsg(ioerr), file(ifile)
CC    GO TO 99

   99 CONTINUE

      END PROGRAM XLINE
