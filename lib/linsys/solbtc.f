C+----------------------------------------------------------------------
C
      SUBROUTINE SOLBTC ( NDIM, NSIZE, NBLOKS, L, D, U, IP, WRK, B )
C
C  PURPOSE:  SOLBTC completes the solution of a cyclic block-tridiagonal
C            system for the given right-hand-side block vector B,  using
C            the factorization previously generated by  DECBTC.   It may
C            be used as many times as there are right-hand-sides corres-
C            ponding to the left-hand-side represented by the given fac-
C            torization.  See DECBTC for further details.
C
C  PARAMETERS:
C  VARIABLE  TYPE  I/O/S  DIMENSIONS  DESCRIPTION
C
C    NDIM     INT    I       -        As for DECBTC.
C    NSIZE    INT    I       -        As for DECBTC.
C    NBLOKS   INT    I       -        As for DECBTC.
C    L,D,U    REAL  I/S   NDIM,NDIM,  Input with the factorizations of
C                         NBLOKS      the left-hand-side partitions
C                                     described in DECBTC.
C    IP       INT    I    NDIM,NBLOKS Block vector of pivot information.
C    WRK      REAL  I/S   See DECBTC  Work space for SOLBT, and also
C                                     contains copies of 2 blocks
C                                     displaced by the needs of DECBT.
C    B        REAL  I/O   NDIM,NBLOKS Input with the right hand side
C                                     block vector (NSIZE*NBLOKS);
C                                     output with the solution.
C  EXTERNAL REFERENCES:
C    NAME    DESCRIPTION
C   SOLBT    Solves with factorization of DECBT  for block trid. systems
C   SOLVE    Solves with factorization of DECOMP for dense system
C
C  AUTHOR:   David Saunders, Informatics Inc, October 1981.
C
C-----------------------------------------------------------------------
C
      IMPLICIT REAL ( A-H, O-Z )
C
      REAL     L(NDIM,NDIM,NBLOKS), D(NDIM,NDIM,NBLOKS),
     +         U(NDIM,NDIM,NBLOKS), WRK(NDIM,NDIM,1),
     +         B(NDIM,NBLOKS)
      INTEGER  IP(NDIM,NBLOKS)
C
C
      NBM1 = NBLOKS-1
      NBM2 = NBLOKS-2
      IW1  = 2*NDIM*NDIM
      IW2  = IW1 + NBM2*NDIM
C
C  *  Solve  A1 t = r.  Set up the RHS first.
C
      IW = IW1
      DO 320 J = 1, NBM1
         DO 310 I = 1, NSIZE
            WRK(I+IW,1,1) = B(I,J)
 310     CONTINUE
         IW = IW + NDIM
 320  CONTINUE
C
      CALL SOLBT ( NSIZE, NDIM, NBM1, D, U, L, WRK(1,1,3), IP )
C
C  *  Solve  C z = s - U t, setting up the RHS first in B(,NBLOKS).
C
      DO 340 I = 1, NSIZE
         SUM1  = 0.E+0
         DO 330 J = 1, NSIZE
            SUM1  = U(I,J,NBLOKS) * WRK(J+IW1,1,1)  +
     +              L(I,J,NBLOKS) * WRK(J+IW2,1,1)  +  SUM1
 330     CONTINUE
         B(I,NBLOKS) = B(I,NBLOKS) - SUM1
 340  CONTINUE
C
      CALL SOLVE( NSIZE, NDIM, D(1,1,NBLOKS), B(1,NBLOKS), IP(1,NBLOKS))
C
C  *  Finally, solve  A1 y  =  r - V z.
C  *  First, set up the RHS block vector (V having only two nonzero
C  *  blocks, previously saved by DECBTC in WRK(,,1:2)).
C
      DO 400 I = 1, NSIZE
         SUM1  = 0.E+0
         SUM2  = 0.E+0
         DO 350 J = 1, NSIZE
            SUM1  = WRK(I,J,1) * B(J,NBLOKS)  +  SUM1
            SUM2  = WRK(I,J,2) * B(J,NBLOKS)  +  SUM2
 350     CONTINUE
         B(I,1)   = B(I,1)   - SUM1
         B(I,NBM1)= B(I,NBM1)- SUM2
 400  CONTINUE
C
      CALL SOLBT ( NSIZE, NDIM, NBM1, D, U, L, B, IP )
C
      RETURN
      END
