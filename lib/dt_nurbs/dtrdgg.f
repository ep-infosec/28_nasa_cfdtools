      SUBROUTINE DTRDGG(GGPF,MXLINE,MXFMTL,MXFNML,MXPARL,
     $                  MXNPAR,LINES,FMTLST,PARSEL,FILNAM,
     $                  PARNAM,NBPAR,XVALUE,ACURVE,
     $                  ASURFC,IERR)
C***********************************************************************
C
C FUNCTION-
C          READ A  GGP (GENERAL GRAPHIC PACKAGE) DATA FILE AND
C          STORE THE DATA IN AN ARRAY SO THAT THE DATA CAN BE
C          PROCESSED BY SPLINE FITTING.
C
C AUTHORS-
C          C.P.CHI             CREATION  SEPTEMBER   1989
C
C INPUT-
C          GGPF   = FILE NAME FOR GGP DATA FILE
C          MXLINE = MAX NUMBER OF DATA LINES IN  INPUT FILE
C          MXFMTL = MAX LENGTH OF THE FORMAT DATA IN INPUT FILE
C          MXFNML = MAX LENGTH OF FILE NAME IN INPUT FILE
C          MXPARL = MAX LENGTH OF PARAMETER NAME IN IPUT FILE
C          MXNPAR = MAX NUMBER OF PARAMETERS IN INPUT FILE
C          PARSEL = CHARACTER VARIABLE CONTAINING THE PARAMETER
C                   NAMES SELECTED
C
C WORKING ARGUMENTS-
C
C          LINES  = BUFFER FOR STORING ALL THE DATA
C          FMTLST = FORMAT LIST IN THE INPUT FILE
C          FILNAM = FILE NAME IN THE INPUT FILE
C          PARNAM = PARAMETER NAMES IN THE INPUT FILE
C          NBPAR  = ARRAY CONTAINING THE SELECTED PARAMETER NAME
C          XVALUE = ARRAY CONTAINING THE VALUE OF SELECTED PARAMETERS
C
C OUTPUT-
C
C          ACURVE = ARRAY CONTAINING DATA FOR TWO SELECTED PARAMETERS
C          ASURFC = ARRAY CONTAINING DATA FOR THREE SELECTED PARAMETERS
C          IERR   = ERROR FLAG
C                 = 0  NO ERROR
C                 = -1 NO OF SELECTED PARAMETERS IS GREATER THAN 3
C                 = -2 NO OF DATA LINES CONTAINING IN INPUT FILE
C                      IS GREATER THAN SPECIFIED NUMBER
C                 = -3 FORMAT DATA IN INPUT FILE IS GREATER THAN
C                      SPECIFIED LENGTH
C                 = -4 FILE NAME IN INPUT FILE IS LONGER THAN SPECIFED
C                      LENGTH
C                 = -5 NO OF PARAMETERS IN INPUT FILE IS GREATER THAN
C                      SPECIFIED NUMBER
C                 = -6 INPUT PARAMETER NAME DOES NOT EXIST
C                 = -7 ERROR IN READING DATA
C
C TYPE/PARAMETER/DIMENSION/COMMON/EQUIVALENCE/DATA/FORMAT STATEMENTS-
C
      CHARACTER*(*) LINES(MXLINE)
      CHARACTER*(*) FMTLST,PARSEL
      CHARACTER*(*) FILNAM
      CHARACTER*(*) PARNAM(MXNPAR)
      CHARACTER*(*) GGPF
C
      DOUBLE PRECISION ACURVE(MXLINE,2),ASURFC(MXLINE,3),
     $          XVALUE(MXNPAR)
      DOUBLE PRECISION RPAR
      INTEGER NBPAR(MXNPAR)
C
      INTEGER DTLNB
      INTEGER NFIRST, NLINE, NLAST, NFL, ILFMT, IFILN, ILPAR, NPAR
      INTEGER I, NS, NE, NBP, ISEL, INB1, INB2, IDX, N, K, IPAR
      INTEGER NBEG, NEND, J
C
C ********************** START OF EXECUTABLE CODE **********************
C
C...OPEN GGP FILE (INPUT TO THIS ROUTINE)
C
      OPEN(UNIT=10,FILE=GGPF,FORM='FORMATTED',STATUS='UNKNOWN')
C
C...READ INPUT DATA FILE
C
      NFIRST=1
      NLINE=NFIRST
   30 CONTINUE
      READ(10,'(A)',ERR=888,END=50) LINES(NLINE)
      NLINE=NLINE+1
      IF(NLINE.GT.MXLINE) THEN
        IERR=-2
        GOTO 999
      ENDIF
      GOTO 30
   50 CONTINUE
      NLAST=NLINE
C
C...DETERMINE POSITION OF LAST NON-BLANK CHARACTER OF THE FORMAT DATA
C
      NFL=NFIRST
      ILFMT=DTLNB(LINES(NFL))
      IF(LINES(NFL)(ILFMT:ILFMT).NE.')'.OR.ILFMT.GT.MXFMTL) THEN
        IERR=-3
        GOTO 999
      ENDIF
      FMTLST=LINES(NFL)(1:ILFMT)
C
C...TRANSFER FILENAME
C
      NFL=NFL+1
      IFILN=DTLNB(LINES(NFL))
      IF(IFILN.GT.MXFNML) THEN
        IERR=-4
        GOTO 999
      ENDIF
      FILNAM=LINES(NFL)(1:20)
C
C...DETERMINE NUMBER AND NAME OF PARAMETERS
C
      NFL=NFL+1
      ILPAR=DTLNB(LINES(NFL))
      NPAR=ILPAR/(MXPARL+1)
      RPAR=REAL(ILPAR)/REAL(MXPARL+1)
      IF(RPAR.GT.REAL(NPAR)) NPAR=NPAR+1
      IF(NPAR.GT.MXNPAR) THEN
        IERR=-5
        GOTO 999
      ENDIF
C
      DO 100 I=1,NPAR
      NS=(I-1)*(MXPARL+1)+1
      NE=NS+(MXPARL-1)
      PARNAM(I)=LINES(NFL)(NS:NE)
  100 CONTINUE
C
C...SELECT THE PARAMETERS TO BE PROCESSED
C **
      IF(PARSEL.EQ.'ALL') THEN
C **
        IF(NPAR.GT.3) THEN
          IERR=-1
          GOTO 999
        ELSE
          NBP=NPAR
          DO 110 I=1,NPAR
          NBPAR(I)=I
  110     CONTINUE
        ENDIF
C **
      ELSE
C **
        ISEL=DTLNB(PARSEL)
        INB1=1
        NBP=0
        DO 180 I=1,ISEL
        IF(PARSEL(I:I).NE.',') THEN
          INB2=I
        ENDIF
C
        IF (PARSEL(I:I).EQ.','.OR.I.EQ.ISEL) THEN
          NBP=NBP+1
          IF(NBP.GT.3) THEN
            IERR=-1
            GOTO 999
          ENDIF
C
          IDX=1
          DO 150 N=1,NPAR
          DO 120 K=INB1,INB2
          IF (PARSEL(K:K).NE.' ') THEN
             INB1=K
             GOTO 130
          ENDIF
  120     CONTINUE
  130     CONTINUE
          IF(PARSEL(INB1:INB2).EQ.PARNAM(N)) THEN
            IPAR=N
            IDX=0
          ENDIF
  150     CONTINUE
          IF(IDX.NE.0) THEN
            IERR=-6
            GOTO 999
          ENDIF
          NBPAR(NBP)=IPAR
          INB1=I+1
        ENDIF
  180   CONTINUE
C **
      ENDIF
C **
C
C...PICK UP REQUIRED DATA AND STORE IN AN ARRAY FOR FURTHER
C   PROCESSING
C
      WRITE(6,*) (PARSEL)
      WRITE(6,*) (PARNAM(NBPAR(I)),I=1,NBP)
      NBEG=NFL+1
      NEND=NLAST-1
      DO 300 N=NBEG,NEND
      READ(LINES(N),FMTLST,ERR=888) (XVALUE(I),I=1,NPAR)
      DO 250 J=1,NBP
      IF(NBP.GT.2) THEN
        ASURFC(N,J)=XVALUE(NBPAR(J))
      ELSE
        ACURVE(N,J)=XVALUE(NBPAR(J))
      ENDIF
C
  250 CONTINUE
C
      IF(NBP.GT.2) THEN
        WRITE(6,*) (ASURFC(N,I),I=1,NBP)
      ELSE
        WRITE(6,*) (ACURVE(N,I),I=1,NBP)
      ENDIF
  300 CONTINUE
      GOTO 999
C
  888 CONTINUE
      IERR=-7
  999 CONTINUE
      RETURN
      END
