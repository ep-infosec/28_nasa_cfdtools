      SUBROUTINE DTSLXT (SURF, PL1, PL2, WORK, NWORK, NPTS, PTS, IER)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CC
CC      THE SUBROUTINE DTSLXT IS USED TO FIND ALL INTERSECTIONS OF
CC      A GIVEN SURFACE WITH A LINE.  THE SURFACE MAY HAVE ANY NUMBER
CC      OF DEPENDENT VARIABLES.  IN THIS CONTEXT, "LINE" MEANS THE
CC      INTERSECTION OF TWO HYPERPLANES IN A SPACE WHOSE DIMENSION
CC      IS THE SAME AS THE NUMBER OF DEPENDENT VARIABLES.  THE
CC      CALLING SEQUENCE FOR THIS SUBROUTINE HAS THE FOLLOWING FORM:
CC
CC      CALL DTSLXT (SURF, PL1, PL2, WORK, NWORK, NPTS, PTS, IER)
CC
CC      WHERE THE PARAMETERS MEAN
CC
CC      SURF   - THE INPUT SPLINE SURFACE
CC      PL1    - THE FIRST PLANE WITH WHICH TO INTERSECT THE CURVE
CC      PL2    - THE SECOND PLANE WITH WHICH TO INTERSECT THE CURVE
CC      WORK   - A WORK ARRAY OF LENGTH NWORK
CC      NWORK  - THE LENGTH OF THE WORK ARRAY
CC      NPTS   - THE NUMBER OF INTERSECTION POINTS FOUND
CC      PTS    - AN ARRAY OF THE PARAMETER VALUES OF THE INTERSECTIONS
CC      IER    - THE ERROR CONTROL FLAG
CC               IER = 0     NO ERRORS DETECTED
CC               IER = -1    SURF(1) <> 2
CC               IER = -2    SURF(2) = 0
CC               IER = -3    INVALID SPLINE ORDER;
CC               IER = -4    INVALID NUMBER OF b-SPLINE COEFFICIENTS
CC               IER = -5    INVALID KNOT SEQUENCE
CC               IER = -6    INPUT PLANES ARE PARALLEL
CC               IER = -7    INSUFFICIENT WORKING STORAGE
CC               IER = -100  UNEXPECTED ERROR RETURN FROM LOWER LEVEL
CC
CC      THOMAS GRANDINE
CC      SEPTEMBER, 1989
CC
CC      MINOR TOLERANCE ADJUSTMENT MADE BY DEBORAH PARSONS 8/23/92
CC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      DOUBLE PRECISION SURF(*), PL1(*), PL2(*), WORK(*), PTS(2,*)
      DOUBLE PRECISION PDOT, PN1, PN2, DDOT, DTMCON, TOL, REGION(2,2)
      DOUBLE PRECISION U0, V0, DN, DNU, DNV, P(2), F1, F2, F1U, F1V
      DOUBLE PRECISION F2U, F2V, G1, G2, G1U, G1V, G2U, G2V, DET
      DOUBLE PRECISION EXREG(2,2)
      REAL VALUES(2)
      INTEGER NWORK, IER, NKNOTS, NCOEFS, NDEP, MC, NEED, OOPS, NLEFT
      INTEGER IDER(2), NPTS, IX, IY, ITER
      CHARACTER*8 SUBNAM
      DATA SUBNAM /'DTSLXT  '/

C----- CHECK THE INPUT FOR VALIDITY

      CALL DTERPT (0)
      CALL DTSCHK (SURF, IER)
      IF (IER .NE. 0) GO TO 9900
      IF (SURF(1) .NE. 2) THEN
        IER = -1
        GO TO 9900
        ENDIF

C----- DETERMINE IF ENOUGH WORKING STORAGE EXISTS FOR FIRST PASS

      NKNOTS = SURF(3) + SURF(4) + SURF(5) + SURF(6)
      NCOEFS = SURF(5) * SURF(6)
      NDEP = SURF(2)
      IF (NDEP .LT. 0) NDEP = -NDEP - 1
      MC = 8 + NCOEFS + NKNOTS
      NEED = 3 * MC
      IF (NEED .GT. NWORK) THEN
        IER = -7
        GO TO 9900
        ENDIF

C----- DETERMINE IF THE PLANES ARE PARALLEL

      PDOT = DDOT (NDEP, PL1, 1, PL2, 1)
      PN1 = SQRT (DDOT (NDEP, PL1, 1, PL1, 1))
      PN2 = SQRT (DDOT (NDEP, PL2, 1, PL2, 1))
      IF (ABS (PDOT - PN1 * PN2) .LT. (PDOT * DTMCON (5))) THEN
        IER = -6
        GO TO 9900
        ENDIF

C----- DETERMINE THE NECESSARY SPLINES HERE

      CALL DCOPY (NKNOTS+8, SURF, 1, WORK, 1)
      CALL DCOPY (NKNOTS+8, SURF, 1, WORK(MC+1), 1)
      WORK(2) = 1
      WORK(MC+2) = 1
      DO 20 IX = 1,NCOEFS
        WORK(8+NKNOTS+IX) = 0.0D0
        WORK(8+NKNOTS+MC+IX) = 0.0D0
        DO 10 IY = 1,NDEP
          WORK(8+NKNOTS+IX) = WORK(8+NKNOTS+IX) +
     *                   PL1(IY) * SURF(8+NKNOTS+IX+(IY-1)*NCOEFS)
          WORK(8+NKNOTS+IX+MC) = WORK(8+NKNOTS+IX+MC) +
     *                   PL2(IY) * SURF(8+NKNOTS+IX+(IY-1)*NCOEFS)
10        CONTINUE
        IF (SURF(2) .LT. 0.0D0) THEN
          WORK(8+NKNOTS+IX) = WORK(8+NKNOTS+IX) -
     *                   PL1(NDEP+1) * SURF(8+NKNOTS+IX+NDEP*NCOEFS)
          WORK(8+NKNOTS+IX+MC) = WORK(8+NKNOTS+IX+MC) -
     *                   PL2(NDEP+1) * SURF(8+NKNOTS+IX+NDEP*NCOEFS)
        ELSE
          WORK(8+NKNOTS+IX) = WORK(8+NKNOTS+IX) - PL1(NDEP+1)
          WORK(8+NKNOTS+IX+MC) = WORK(8+NKNOTS+IX+MC) - PL2(NDEP+1)
          ENDIF
20      CONTINUE

C----- NOW DETERMINE THE ZEROS OF THESE TWO NEW SPLINES

      NPTS = 0
      CALL DTRPST (NWORK)
      TOL = SQRT (DTMCON (5))
      OOPS = 0
      CALL DTSUTL (SURF, 2, REGION, IER)
      IF (IER .NE. 0) THEN
        IER = -100
        GO TO 9900
        ENDIF
      EXREG(1,1) = REGION(1,1) - 0.2D0 * (REGION(2,1) - REGION(1,1))
      EXREG(2,1) = REGION(2,1) + 0.2D0 * (REGION(2,1) - REGION(1,1))
      EXREG(1,2) = REGION(1,2) - 0.2D0 * (REGION(2,2) - REGION(1,2))
      EXREG(2,2) = REGION(2,2) + 0.2D0 * (REGION(2,2) - REGION(1,2))

C----- DETERMINE THE INITIAL GUESS

100   CALL DTRPUN (2, VALUES)
      U0 = REGION(1,1) + VALUES(1) * (REGION(2,1) - REGION(1,1))
      V0 = REGION(1,2) + VALUES(2) * (REGION(2,2) - REGION(1,2))
      NLEFT = NWORK - 2 * MC - 3 * NPTS
      ITER = 0

C----- COMPUTE THE COMPONENTS OF THE DENOMINATOR

110   DO 120 IX = 1,NPTS
        WORK(2*MC+3*IX-2) = 2.0D0 * (U0 - PTS(1,IX))
        WORK(2*MC+3*IX-1) = 2.0D0 * (V0 - PTS(2,IX))
        WORK(2*MC+3*IX) = 0.25D0 * (WORK(2*MC+3*IX-2) ** 2 +
     *                              WORK(2*MC+3*IX-1) ** 2)
120     CONTINUE

C----- COMPUTE THE DENOMINATOR

      DN = 1.0D0
      DO 130 IX = 1,NPTS
        DN = DN * WORK(2*MC+3*IX)
130     CONTINUE
      IF (DN .EQ. 0.0D0) GO TO 100

C----- COMPUTE THE DERIVATIVES OF THE DENOMINATOR

      DNU = 0.0D0
      DNV = 0.0D0
      DO 140 IX = 1,NPTS
        DNU = DNU + WORK(2*MC+3*IX-2) / WORK(2*MC+3*IX)
        DNV = DNV + WORK(2*MC+3*IX-1) / WORK(2*MC+3*IX)
140     CONTINUE
      DNU = DN * DNU
      DNV = DN * DNV

C----- DETERMINE THE APPROPRIATE DERIVATIVES OF THE SPLINE

      P(1) = U0
      P(2) = V0
      CALL DTNPVL (P, 1, WORK, WORK(2*MC+3*NPTS+1), NLEFT, G1, IER)
      IF (IER .NE. 0) THEN
        IER = -100
        GO TO 9900
        ENDIF
      CALL DTNPVL (P, 1, WORK(MC+1), WORK(2*MC+3*NPTS+1), NLEFT, G2,
     *             IER)
      IF (IER .NE. 0) THEN
        IER = -100
        GO TO 9900
        ENDIF
      IDER(1) = 1
      IDER(2) = 0
      CALL DTNPDR (P, 1, IDER, WORK, WORK(2*MC+3*NPTS+1), NLEFT, G1U,
     *             IER)
      IF (IER .NE. 0) THEN
        IER = -100
        GO TO 9900
        ENDIF
      CALL DTNPDR (P, 1, IDER, WORK(MC+1), WORK(2*MC+3*NPTS+1), NLEFT,
     *             G2U, IER)
      IF (IER .NE. 0) THEN
        IER = -100
        GO TO 9900
        ENDIF
      IDER(1) = 0
      IDER(2) = 1
      CALL DTNPDR (P, 1, IDER, WORK, WORK(2*MC+3*NPTS+1), NLEFT, G1V,
     *             IER)
      IF (IER .NE. 0) THEN
        IER = -100
        GO TO 9900
        ENDIF
      CALL DTNPDR (P, 1, IDER, WORK(MC+1), WORK(2*MC+3*NPTS+1), NLEFT,
     *             G2V, IER)
      IF (IER .NE. 0) THEN
        IER = -100
        GO TO 9900
        ENDIF

C----- GENERATE THE NEWTON ENTRIES

      F1 = G1 / DN
      F2 = G2 / DN
      F1U = (G1U * DN - G1 * DNU) / DN ** 2
      F1V = (G1V * DN - G1 * DNV) / DN ** 2
      F2U = (G2U * DN - G2 * DNU) / DN ** 2
      F2V = (G2V * DN - G2 * DNV) / DN ** 2

C----- COMPUTE THE DETERMINANT OF THE MATRIX

      DET = F1U * F2V - F1V * F2U
      IF (ABS (DET) .LT. TOL) THEN
        IF (F1U .EQ. 0.0D0) F1U = TOL
        IF (F1V .EQ. 0.0D0) F1V = TOL
        F1U = F1U + SIGN (1.0D0, F1U)
        F2V = F2V + SIGN (1.0D0, F2V)
        DET = F1U * F2V - F1V * F2U
        ENDIF

C----- COMPUTE THE UPDATE TO THE CURRENT POINT

      DNU = (F1V * F2 - F2V * F1) / DET
      DNV = (F2U * F1 - F1U * F2) / DET
      U0 = U0 + DNU
      V0 = V0 + DNV
      DET = SQRT (DNU ** 2 + DNV ** 2)
      ITER = ITER + 1

C----- DETERMINE WHETHER OR NOT TO QUIT

      IF ((U0 .LT. EXREG(1,1)) .OR. (U0 .GT. EXREG(2,1)) .OR.
     *    (V0 .LT. EXREG(1,2)) .OR. (V0 .GT. EXREG(2,2)) .OR.
     *    (ITER .GT. 20)) THEN
        OOPS = OOPS + 1
        IF (OOPS .LT. 20) GO TO 100
        GO TO 9900
        ENDIF
      U0 = MIN (REGION(2,1), MAX (REGION(1,1), U0))
      V0 = MIN (REGION(2,2), MAX (REGION(1,2), V0))
      IF (DET .GT. 1.D1 * DTMCON (6)) GO TO 110
      NPTS = NPTS + 1
      PTS(1,NPTS) = U0
      PTS(2,NPTS) = V0
      GO TO 100

C----- NOW PERFORM THE ERROR PROCESSING STEP

9900  CONTINUE
      CALL DTERPT (1)
      IF (IER .LT. 0) THEN
        IF (IER .EQ. -7) CALL DTERR (2, SUBNAM, IER, NEED)
        IF (IER .EQ. -100) CALL DTERR (5, SUBNAM, IER, 0)
        IF ((IER .NE. -7) .AND. (IER .NE. -100)) THEN
          CALL DTERR (1, SUBNAM, IER, 0)
          ENDIF
        ENDIF
      IF (IER .GT. 0) CALL DTERR (0, SUBNAM, IER, 0)
      END
