C+----------------------------------------------------------------------
C
      SUBROUTINE CLUSGEO ( LUNCRT, N, D1, TOTDIS, RATIO, NWR, CLUS, X )
C
C  ACRONYM:  CLUStered GEOmetric progressions (a stretching function)
C            ----      ---
C  PURPOSE:  CLUSGEO generates abscissas with a (modified) geometric
C            distribution indicated by
C
C               DX(I) = DX(I-1) * ( 1 + M * ( (I-1) / (N-1) ) ** CLUS )
C
C            where CLUS may be zero.
C
C  METHOD:   Multiplier M has to be determined iteratively in order for
C            the sum of the DXs to be the desired total.  A bisection
C            search is implemented here in preference to using a zero-
C            finding utility.
C
C  ARGUMENTS:
C    NAME    DIM   TYPE I/O/S DESCRIPTION
C   LUNCRT    -     I     I   Logical unit for screen output.
C   N         -     I     I   Number of intervals.
C   D1        -     R     I   Size of first interval.
C   TOTDIS    -     R     I   Total distance (i.e., sum of intervals).
C   RATIO     -     R     I   Ratio of interval I to interval I-1 for
C                             I = 2:NWR+1. 
C   NWR       -     R     I   See RATIO.  0 <= NWR << N
C   CLUS      -     R     I   =0: geometric spacing
C                             >0: bunching at XMIN
C   X         N     R     O   Output distribution.
C
C  PARAMETER CONSTANTS:
C    NAME    TYPE   DESCRIPTION
C   TOL       R     Convergence criterion
C
C  NOTES:
C    (1) IMPLICIT NONE is non-standard.
C
C  ENVIRONMENT:  VAX/VMS, FORTRAN 77
C
C  DEVELOPMENT HISTORY:
C     DATE   INITIALS   DESCRIPTION 
C   11/01/86    JEM     Initial design and code.
C   05/08/87  RGL/DAS   Description clarified (but still some puzzles).
C
C  AUTHOR:  John E. Melton, NASA/Ames Research Ctr., Moffett Field, CA
C
C-----------------------------------------------------------------------

C     Declarations.

      IMPLICIT NONE

C     Arguments.

      INTEGER
     >   LUNCRT, N, NWR
      REAL
     >   D1, TOTDIS, RATIO, CLUS, X(N)

C     Constants.

      INTEGER
     >   NITER
      REAL
     >   ONE, TOL, ZERO
      PARAMETER
     >   (TOL=1.E-03, NITER=200, ZERO=0.E+0, ONE=1.E+0)

C     Variables.

      INTEGER
     > I, ITER, J, K
      REAL
     >   DEL, DEL1, FRAC, RML, RMM, RMR, YL, YM, YR

      X(1) = D1
      DEL1 = D1

      IF ( NWR.GT.0 ) THEN
         DO 20 K = 2, NWR + 1
            DEL1 = DEL1 * RATIO
            X(K) = X(K-1) + DEL1
   20    CONTINUE
      END IF

C ... Use a bisection search to find the correct multiplier:

      RML = ZERO
      DEL = DEL1

      DO 40 K = NWR+2, N
         FRAC = FLOAT (K - 1) / FLOAT (N - 1)
         DEL  = DEL * (ONE + RML * (FRAC**CLUS))
         X(K) = X(K-1) + DEL
   40 CONTINUE

      YL = X(N) - TOTDIS

C     WRITE (LUNCRT,*) 'CLUSGEO:  Bisection Search for Multiplier'
C     WRITE (LUNCRT,*) '          Left point:  RML, YL = ', RML, YL

      IF ( D1 * N .LE. TOTDIS ) THEN
         RMR = ONE
      ELSE            
         RMR = -ONE
      END IF

   60 DEL = DEL1

      DO 80 K = NWR+2, N
         FRAC = FLOAT (K - 1) / FLOAT (N - 1)
         DEL  = DEL * (ONE + RMR * (FRAC**CLUS))
         X(K) = X(K-1) + DEL
   80 CONTINUE

      YR = X(N) - TOTDIS

C     WRITE (LUNCRT,*) '         Right point:  RMR, YR = ', RMR, YR

      IF ( ( YR .LE. 0 .AND. D1 * N .LE. TOTDIS ) .OR.
     >     ( YR .GE. 0 .AND. D1 * N .GT. TOTDIS ) ) THEN
         RML = RMR
         YL  = YR
         RMR = RMR * 1.5E+0
         GO TO 60
      END IF

C     WRITE (LUNCRT,'(//'' CLUSGEO:  Bisection Search''/'' NITER'',
C    >''    RML       YL        RMM       YM        RMR       YR'')')

      DO 120 ITER = 1, NITER

         RMM = (RMR + RML) / 2
         DEL = DEL1

         DO 100 K = NWR+2, N
            FRAC = FLOAT (K - 1) / FLOAT (N - 1)
            DEL  = DEL * (ONE + RMM * (FRAC**CLUS))
            X(K) = X(K-1) + DEL
  100    CONTINUE

         YM = X(N) - TOTDIS

CDEBUG   WRITE (LUNCRT,'(1X,I5,6F10.4)') ITER, RML, YL, RMM, YM, RMR, YR

C ...    Test for convergence:

         IF ( ABS(YM) .LE. TOL ) GO TO 999

         IF ( YM * YL .GT. 0 ) THEN
            RML = RMM
            YL = YM
         ELSE
            RMR = RMM
            YR = YM
         END IF

  120 CONTINUE

C ... Should not arrive here:

      WRITE (LUNCRT,'(/'' Bisection Failed!  F(X) ='', F10.4/)') YM

  999 RETURN
      END
